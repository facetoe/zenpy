######################################################################
#  Do not modify, these classes are autogenerated by gen_classes.py  #
######################################################################

import dateutil.parser


class BaseObject(object):
    def to_dict(self):
        copy_dict = self.__dict__.copy()
        for key in list(copy_dict.keys()):
            if copy_dict[key] is None or key == 'api':
                del copy_dict[key]
                continue

            if key.startswith('_'):
                copy_dict[key[1:]] = copy_dict[key]
                del copy_dict[key]
        return copy_dict

    def __repr__(self):
        def stringify(item):
            return item if isinstance(item, int) else "'{}'".format(item)

        if hasattr(self, 'id'):
            return "[%s(id=%s)]" % (self.__class__.__name__,
                                    stringify(self.id))
        elif hasattr(self, 'token'):
            return "[%s(token='%s')]" % (self.__class__.__name__, self.token)
        elif hasattr(self, 'key'):
            return "[%s(key='%s')]" % (self.__class__.__name__, self.key)
        elif hasattr(self, 'name'):
            return "[%s(name='%s')]" % (self.__class__.__name__, self.name)
        elif hasattr(self, 'account_key'):
            return "[%s(account_key='%s')]" % (self.__class__.__name__,
                                               self.account_key)
        else:
            return "[%s()]" % self.__class__.__name__


class ResponseTime(BaseObject):
    def __init__(self, api=None, avg=None, first=None, max=None, **kwargs):

        self.api = api
        self.avg = avg
        self.first = first
        self.max = max

        for key, value in kwargs.items():
            setattr(self, key, value)


class IpAddress(BaseObject):
    def __init__(self,
                 api=None,
                 id=None,
                 ip_address=None,
                 reason=None,
                 type=None,
                 **kwargs):

        self.api = api
        self.id = id
        self.ip_address = ip_address
        self.reason = reason
        self.type = type

        for key, value in kwargs.items():
            setattr(self, key, value)


class Shortcut(BaseObject):
    def __init__(self,
                 api=None,
                 message=None,
                 name=None,
                 options=None,
                 tags=None,
                 **kwargs):

        self.api = api
        self.message = message
        self.name = name
        self.options = options
        self.tags = tags

        for key, value in kwargs.items():
            setattr(self, key, value)


class Session(BaseObject):
    def __init__(self,
                 api=None,
                 browser=None,
                 city=None,
                 country_code=None,
                 country_name=None,
                 end_date=None,
                 id=None,
                 ip=None,
                 platform=None,
                 region=None,
                 start_date=None,
                 user_agent=None,
                 **kwargs):

        self.api = api
        self.browser = browser
        self.city = city
        self.country_code = country_code
        self.country_name = country_name
        self.end_date = end_date

        # Comment: Automatically assigned when the session is created
        # Mandatory: yes
        # Read-only: yes
        # Type: integer
        self.id = id
        self.ip = ip
        self.platform = platform
        self.region = region
        self.start_date = start_date
        self.user_agent = user_agent

        for key, value in kwargs.items():
            setattr(self, key, value)


class Roles(BaseObject):
    def __init__(self, api=None, administrator=None, owner=None, **kwargs):

        self.api = api
        self.administrator = administrator
        self.owner = owner

        for key, value in kwargs.items():
            setattr(self, key, value)


class Visitor(BaseObject):
    def __init__(self,
                 api=None,
                 email=None,
                 id=None,
                 name=None,
                 notes=None,
                 phone=None,
                 **kwargs):

        self.api = api
        self.email = email
        self.id = id
        self.name = name
        self.notes = notes
        self.phone = phone

        for key, value in kwargs.items():
            setattr(self, key, value)


class SearchResult(BaseObject):
    def __init__(self,
                 api=None,
                 id=None,
                 preview=None,
                 type=None,
                 url=None,
                 **kwargs):

        self.api = api

        self._timestamp = None
        self.id = id
        self.preview = preview
        self.type = type
        self.url = url

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp


class Definition(BaseObject):
    def __init__(self, api=None, event=None, **kwargs):

        self.api = api

        self._actions = None

        self._condition = None
        self.event = event

        for key, value in kwargs.items():
            setattr(self, key, value)


class Department(BaseObject):
    def __init__(self,
                 api=None,
                 description=None,
                 enabled=None,
                 id=None,
                 name=None,
                 **kwargs):

        self.api = api

        self._members = None

        self._settings = None
        self.description = description
        self.enabled = enabled
        self.id = id
        self.name = name

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def settings(self):

        if self.api and self._settings:
            return self.api._get_settings(self._settings)

    @settings.setter
    def settings(self, settings):
        if settings:
            self._settings = settings


class Plan(BaseObject):
    def __init__(self,
                 api=None,
                 agent_leaderboard=None,
                 agent_reports=None,
                 analytics=None,
                 chat_reports=None,
                 daily_reports=None,
                 email_reports=None,
                 file_upload=None,
                 goals=None,
                 high_load=None,
                 integrations=None,
                 ip_restriction=None,
                 long_desc=None,
                 max_advanced_triggers=None,
                 max_agents=None,
                 max_basic_triggers=None,
                 max_concurrent_chats=None,
                 max_departments=None,
                 max_history_search_days=None,
                 monitoring=None,
                 name=None,
                 operating_hours=None,
                 price=None,
                 rest_api=None,
                 short_desc=None,
                 sla=None,
                 support=None,
                 unbranding=None,
                 widget_customization=None,
                 **kwargs):

        self.api = api
        self.agent_leaderboard = agent_leaderboard
        self.agent_reports = agent_reports
        self.analytics = analytics
        self.chat_reports = chat_reports
        self.daily_reports = daily_reports
        self.email_reports = email_reports
        self.file_upload = file_upload
        self.goals = goals
        self.high_load = high_load
        self.integrations = integrations
        self.ip_restriction = ip_restriction
        self.long_desc = long_desc
        self.max_advanced_triggers = max_advanced_triggers
        self.max_agents = max_agents
        self.max_basic_triggers = max_basic_triggers
        self.max_concurrent_chats = max_concurrent_chats
        self.max_departments = max_departments
        self.max_history_search_days = max_history_search_days
        self.monitoring = monitoring
        self.name = name
        self.operating_hours = operating_hours
        self.price = price
        self.rest_api = rest_api
        self.short_desc = short_desc
        self.sla = sla
        self.support = support
        self.unbranding = unbranding
        self.widget_customization = widget_customization

        for key, value in kwargs.items():
            setattr(self, key, value)


class Webpath(BaseObject):
    def __init__(self, api=None, from_=None, title=None, to=None, **kwargs):

        self.api = api

        self._timestamp = None
        self.from_ = from_
        self.title = title
        self.to = to

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp


class Account(BaseObject):
    def __init__(self,
                 api=None,
                 account_key=None,
                 create_date=None,
                 status=None,
                 **kwargs):

        self.api = api

        self._billing = None

        self._plan = None
        self.account_key = account_key
        self.create_date = create_date
        self.status = status

        for key, value in kwargs.items():
            setattr(self, key, value)


class Ban(BaseObject):
    def __init__(self, api=None, **kwargs):

        self.api = api

        self._ip_address = None

        self._visitor = None

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def ip_address(self):

        if self.api and self._ip_address:
            return self.api._get_ip_address(self._ip_address)

    @ip_address.setter
    def ip_address(self, ip_address):
        if ip_address:
            self._ip_address = ip_address


class Count(BaseObject):
    def __init__(self,
                 api=None,
                 agent=None,
                 total=None,
                 visitor=None,
                 **kwargs):

        self.api = api
        self.agent = agent
        self.total = total
        self.visitor = visitor

        for key, value in kwargs.items():
            setattr(self, key, value)


class OfflineMessage(BaseObject):
    def __init__(self,
                 api=None,
                 department_id=None,
                 department_name=None,
                 id=None,
                 message=None,
                 type=None,
                 unread=None,
                 zendesk_ticket_id=None,
                 **kwargs):

        self.api = api

        self._session = None

        self._timestamp = None

        self._visitor = None
        self.department_id = department_id
        self.department_name = department_name
        self.id = id
        self.message = message
        self.type = type
        self.unread = unread
        self.zendesk_ticket_id = zendesk_ticket_id

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp


class Goal(BaseObject):
    def __init__(self,
                 api=None,
                 attribution_model=None,
                 attribution_period=None,
                 description=None,
                 enabled=None,
                 id=None,
                 name=None,
                 **kwargs):

        self.api = api

        self._settings = None
        self.attribution_model = attribution_model
        self.attribution_period = attribution_period
        self.description = description
        self.enabled = enabled
        self.id = id
        self.name = name

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def settings(self):

        if self.api and self._settings:
            return self.api._get_settings(self._settings)

    @settings.setter
    def settings(self, settings):
        if settings:
            self._settings = settings


class Agent(BaseObject):
    def __init__(self,
                 api=None,
                 create_date=None,
                 display_name=None,
                 email=None,
                 enabled=None,
                 first_name=None,
                 id=None,
                 last_login=None,
                 last_name=None,
                 login_count=None,
                 **kwargs):

        self.api = api

        self._departments = None

        self._roles = None
        self.create_date = create_date
        self.display_name = display_name
        self.email = email
        self.enabled = enabled
        self.first_name = first_name
        self.id = id
        self.last_login = last_login
        self.last_name = last_name
        self.login_count = login_count

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def departments(self):

        if self.api and self._departments:
            return self.api._get_departments(self._departments)

    @departments.setter
    def departments(self, departments):
        if departments:
            self._departments = departments


class Trigger(BaseObject):
    def __init__(self,
                 api=None,
                 description=None,
                 enabled=None,
                 name=None,
                 **kwargs):

        self.api = api

        self._definition = None
        self.description = description
        self.enabled = enabled
        self.name = name

        for key, value in kwargs.items():
            setattr(self, key, value)


class Billing(BaseObject):
    def __init__(self,
                 api=None,
                 additional_info=None,
                 address1=None,
                 address2=None,
                 city=None,
                 company=None,
                 country_code=None,
                 email=None,
                 first_name=None,
                 last_name=None,
                 postal_code=None,
                 state=None,
                 **kwargs):

        self.api = api
        self.additional_info = additional_info
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.company = company
        self.country_code = country_code
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.postal_code = postal_code
        self.state = state

        for key, value in kwargs.items():
            setattr(self, key, value)


class Chat(BaseObject):
    def __init__(self,
                 api=None,
                 agent_ids=None,
                 comment=None,
                 department_id=None,
                 department_name=None,
                 duration=None,
                 id=None,
                 missed=None,
                 rating=None,
                 referrer_search_engine=None,
                 referrer_search_terms=None,
                 started_by=None,
                 tags=None,
                 triggered=None,
                 triggered_response=None,
                 type=None,
                 unread=None,
                 zendesk_ticket_id=None,
                 **kwargs):

        self.api = api

        self._agent_names = None

        self._count = None

        self._end_timestamp = None

        self._history = None

        self._response_time = None

        self._session = None

        self._timestamp = None

        self._visitor = None

        self._webpath = None
        self.agent_ids = agent_ids
        self.comment = comment
        self.department_id = department_id
        self.department_name = department_name
        self.duration = duration
        self.id = id
        self.missed = missed
        self.rating = rating
        self.referrer_search_engine = referrer_search_engine
        self.referrer_search_terms = referrer_search_terms
        self.started_by = started_by
        self.tags = tags
        self.triggered = triggered
        self.triggered_response = triggered_response
        self.type = type
        self.unread = unread
        self.zendesk_ticket_id = zendesk_ticket_id

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def end_timestamp(self):

        if self.end_timestamp:
            return dateutil.parser.parse(self.end_timestamp)

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        if end_timestamp:
            self._end_timestamp = end_timestamp

    @property
    def history(self):

        if self.api and self._history:
            return self.api._get_history(self._history)

    @history.setter
    def history(self, history):
        if history:
            self._history = history

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp

    @property
    def webpath(self):

        if self.api and self._webpath:
            return self.api._get_webpath(self._webpath)

    @webpath.setter
    def webpath(self, webpath):
        if webpath:
            self._webpath = webpath

    @property
    def agents(self):

        if self.api and self.agent_ids:
            return self.api._get_agents(self.agent_ids)

    @agents.setter
    def agents(self, agents):
        if agents:
            self.agent_ids = [o.id for o in agents]
            self._agents = agents
