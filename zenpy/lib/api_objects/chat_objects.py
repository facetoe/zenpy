######################################################################
#  Do not modify, these classes are autogenerated by gen_classes.py  #
######################################################################

import dateutil.parser


class BaseObject(object):
    def to_dict(self):
        copy_dict = self.__dict__.copy()
        for key in list(copy_dict.keys()):
            if copy_dict[key] is None or key == 'api':
                del copy_dict[key]
                continue

            if key.startswith('_'):
                copy_dict[key[1:]] = copy_dict[key]
                del copy_dict[key]
        return copy_dict

    def __repr__(self):
        if hasattr(self, 'id'):
            return "[%s(id=%s)]" % (self.__class__.__name__, self.id)
        elif hasattr(self, 'token'):
            return "[%s(token='%s')]" % (self.__class__.__name__, self.token)
        elif hasattr(self, 'key'):
            return "[%s(key='%s')]" % (self.__class__.__name__, self.key)
        else:
            return "[%s()]" % self.__class__.__name__


class ResponseTime(BaseObject):
    def __init__(self, api=None, avg=None, first=None, max=None, **kwargs):

        self.api = api
        self.avg = avg
        self.first = first
        self.max = max

        for key, value in kwargs.items():
            setattr(self, key, value)


class Session(BaseObject):
    def __init__(self,
                 api=None,
                 browser=None,
                 city=None,
                 country_code=None,
                 country_name=None,
                 end_date=None,
                 id=None,
                 ip=None,
                 platform=None,
                 region=None,
                 start_date=None,
                 user_agent=None,
                 **kwargs):

        self.api = api
        self.browser = browser
        self.city = city
        self.country_code = country_code
        self.country_name = country_name
        self.end_date = end_date

        # Comment: Automatically assigned when the session is created
        # Mandatory: yes
        # Read-only: yes
        # Type: integer
        self.id = id
        self.ip = ip
        self.platform = platform
        self.region = region
        self.start_date = start_date
        self.user_agent = user_agent

        for key, value in kwargs.items():
            setattr(self, key, value)


class Visitor(BaseObject):
    def __init__(self,
                 api=None,
                 email=None,
                 id=None,
                 name=None,
                 notes=None,
                 phone=None,
                 **kwargs):

        self.api = api
        self.email = email
        self.id = id
        self.name = name
        self.notes = notes
        self.phone = phone

        for key, value in kwargs.items():
            setattr(self, key, value)


class Webpath(BaseObject):
    def __init__(self, api=None, from_=None, title=None, to=None, **kwargs):

        self.api = api

        self._timestamp = None
        self.from_ = from_
        self.title = title
        self.to = to

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp


class Count(BaseObject):
    def __init__(self,
                 api=None,
                 agent=None,
                 total=None,
                 visitor=None,
                 **kwargs):

        self.api = api
        self.agent = agent
        self.total = total
        self.visitor = visitor

        for key, value in kwargs.items():
            setattr(self, key, value)


class OfflineMessage(BaseObject):
    def __init__(self,
                 api=None,
                 department_id=None,
                 department_name=None,
                 id=None,
                 message=None,
                 type=None,
                 unread=None,
                 zendesk_ticket_id=None,
                 **kwargs):

        self.api = api

        self._session = None

        self._timestamp = None

        self._visitor = None
        self.department_id = department_id
        self.department_name = department_name
        self.id = id
        self.message = message
        self.type = type
        self.unread = unread
        self.zendesk_ticket_id = zendesk_ticket_id

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp


class Chat(BaseObject):
    def __init__(self,
                 api=None,
                 agent_ids=None,
                 comment=None,
                 department_id=None,
                 department_name=None,
                 duration=None,
                 id=None,
                 missed=None,
                 rating=None,
                 referrer_search_engine=None,
                 referrer_search_terms=None,
                 started_by=None,
                 tags=None,
                 triggered=None,
                 triggered_response=None,
                 type=None,
                 unread=None,
                 zendesk_ticket_id=None,
                 **kwargs):

        self.api = api

        self._agent_names = None

        self._count = None

        self._end_timestamp = None

        self._history = None

        self._response_time = None

        self._session = None

        self._timestamp = None

        self._visitor = None

        self._webpath = None
        self.agent_ids = agent_ids
        self.comment = comment
        self.department_id = department_id
        self.department_name = department_name
        self.duration = duration
        self.id = id
        self.missed = missed
        self.rating = rating
        self.referrer_search_engine = referrer_search_engine
        self.referrer_search_terms = referrer_search_terms
        self.started_by = started_by
        self.tags = tags
        self.triggered = triggered
        self.triggered_response = triggered_response
        self.type = type
        self.unread = unread
        self.zendesk_ticket_id = zendesk_ticket_id

        for key, value in kwargs.items():
            setattr(self, key, value)

    @property
    def end_timestamp(self):

        if self.end_timestamp:
            return dateutil.parser.parse(self.end_timestamp)

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        if end_timestamp:
            self._end_timestamp = end_timestamp

    @property
    def history(self):

        if self.api and self._history:
            return self.api._get_history(self._history)

    @history.setter
    def history(self, history):
        if history:
            self._history = history

    @property
    def timestamp(self):

        if self._timestamp:
            return dateutil.parser.parse(self._timestamp)

    @timestamp.setter
    def timestamp(self, timestamp):
        if timestamp:
            self._timestamp = timestamp

    @property
    def webpath(self):

        if self.api and self._webpath:
            return self.api._get_webpath(self._webpath)

    @webpath.setter
    def webpath(self, webpath):
        if webpath:
            self._webpath = webpath

    @property
    def agents(self):

        if self.api and self.agent_ids:
            return self.api._get_agents(self.agent_ids)

    @agents.setter
    def agents(self, agents):
        if agents:
            self.agent_ids = [o.id for o in agents]
            self._agents = agents
